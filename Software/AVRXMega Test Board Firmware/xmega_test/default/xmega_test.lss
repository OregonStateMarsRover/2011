
xmega_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000394  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003b  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000042b  00000000  00000000  00000443  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000017a  00000000  00000000  0000086e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000322  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001dc  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001a4  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
   4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
   8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
   c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  10:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  14:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  18:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  1c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  20:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  24:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  28:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  2c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  30:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  34:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  38:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  3c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  40:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  44:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  48:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  4c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  50:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  54:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  58:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  5c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  60:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  64:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  68:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  6c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  70:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  74:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  78:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  7c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  80:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  84:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  88:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  8c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  90:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  94:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  98:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  9c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  a0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  a4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  a8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  ac:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  b0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  b4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  b8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  bc:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  c0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  c4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  c8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  cc:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  d0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  d4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  d8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  dc:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  e0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  e4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  e8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  ec:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  f0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  f4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  f8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
  fc:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 100:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 104:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 108:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 10c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 110:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 114:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 118:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 11c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 120:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 124:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 128:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 12c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 130:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 134:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 138:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 13c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 140:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 144:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 148:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 14c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 150:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 154:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 158:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 15c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 160:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 164:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 168:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 16c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 170:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 174:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 178:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 17c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 180:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 184:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 188:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 18c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 190:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 194:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 198:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 19c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1a0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1a4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1a8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1ac:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1b0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1b4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1b8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1bc:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1c0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1c4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1c8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1cc:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1d0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1d4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1d8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1dc:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1e0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
 1e4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>

000001e8 <__ctors_end>:
 1e8:	11 24       	eor	r1, r1
 1ea:	1f be       	out	0x3f, r1	; 63
 1ec:	cf ef       	ldi	r28, 0xFF	; 255
 1ee:	df e5       	ldi	r29, 0x5F	; 95
 1f0:	de bf       	out	0x3e, r29	; 62
 1f2:	cd bf       	out	0x3d, r28	; 61
 1f4:	00 e0       	ldi	r16, 0x00	; 0
 1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
 1f8:	10 e2       	ldi	r17, 0x20	; 32
 1fa:	a0 e0       	ldi	r26, 0x00	; 0
 1fc:	b0 e2       	ldi	r27, 0x20	; 32
 1fe:	e4 e9       	ldi	r30, 0x94	; 148
 200:	f3 e0       	ldi	r31, 0x03	; 3
 202:	00 e0       	ldi	r16, 0x00	; 0
 204:	0b bf       	out	0x3b, r16	; 59
 206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
 208:	07 90       	elpm	r0, Z+
 20a:	0d 92       	st	X+, r0
 20c:	a0 30       	cpi	r26, 0x00	; 0
 20e:	b1 07       	cpc	r27, r17
 210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>
 212:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <main>
 216:	0c 94 c8 01 	jmp	0x390	; 0x390 <_exit>

0000021a <__bad_interrupt>:
 21a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021e <init>:
	}
	return 0;
}

void init(void){
	PORTA.DIR=0x00;
 21e:	10 92 00 06 	sts	0x0600, r1
	PORTB.DIR=0x00;
 222:	10 92 20 06 	sts	0x0620, r1
	PORTC.DIR=0x00;
 226:	10 92 40 06 	sts	0x0640, r1
	PORTD.DIR=0x00;
 22a:	10 92 60 06 	sts	0x0660, r1
	PORTE.DIR=0b00000010;
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	80 93 80 06 	sts	0x0680, r24
	PORTF.DIR=0b11100000;
 234:	80 ee       	ldi	r24, 0xE0	; 224
 236:	80 93 a0 06 	sts	0x06A0, r24
}
 23a:	08 95       	ret

0000023c <led_on>:

void led_on(u08 addr){
	switch(addr){
 23c:	82 30       	cpi	r24, 0x02	; 2
 23e:	b1 f0       	breq	.+44     	; 0x26c <led_on+0x30>
 240:	83 30       	cpi	r24, 0x03	; 3
 242:	28 f4       	brcc	.+10     	; 0x24e <led_on+0x12>
 244:	88 23       	and	r24, r24
 246:	41 f0       	breq	.+16     	; 0x258 <led_on+0x1c>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	29 f5       	brne	.+74     	; 0x296 <led_on+0x5a>
 24c:	0b c0       	rjmp	.+22     	; 0x264 <led_on+0x28>
 24e:	83 30       	cpi	r24, 0x03	; 3
 250:	89 f0       	breq	.+34     	; 0x274 <led_on+0x38>
 252:	8f 3f       	cpi	r24, 0xFF	; 255
 254:	01 f5       	brne	.+64     	; 0x296 <led_on+0x5a>
 256:	15 c0       	rjmp	.+42     	; 0x282 <led_on+0x46>
		case 0:{
			PORTE.OUT |= (1<<1);
 258:	80 91 84 06 	lds	r24, 0x0684
 25c:	82 60       	ori	r24, 0x02	; 2
 25e:	e0 e8       	ldi	r30, 0x80	; 128
 260:	f6 e0       	ldi	r31, 0x06	; 6
 262:	0d c0       	rjmp	.+26     	; 0x27e <led_on+0x42>
			break;
		}
		case 1:{
			PORTF.OUT |= (1<<5);
 264:	80 91 a4 06 	lds	r24, 0x06A4
 268:	80 62       	ori	r24, 0x20	; 32
 26a:	07 c0       	rjmp	.+14     	; 0x27a <led_on+0x3e>
			break;
		}
		case 2:{
			PORTF.OUT |= (1<<6);
 26c:	80 91 a4 06 	lds	r24, 0x06A4
 270:	80 64       	ori	r24, 0x40	; 64
 272:	03 c0       	rjmp	.+6      	; 0x27a <led_on+0x3e>
			break;
		}
		case 3:{
			PORTF.OUT |= (1<<7);
 274:	80 91 a4 06 	lds	r24, 0x06A4
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	e0 ea       	ldi	r30, 0xA0	; 160
 27c:	f6 e0       	ldi	r31, 0x06	; 6
 27e:	84 83       	std	Z+4, r24	; 0x04
 280:	08 95       	ret
			break;
		}
		case 255:{
			led_on(0);
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 1e 01 	call	0x23c	; 0x23c <led_on>
			led_on(1);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 1e 01 	call	0x23c	; 0x23c <led_on>
			led_on(2);
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	0e 94 1e 01 	call	0x23c	; 0x23c <led_on>
 294:	ef cf       	rjmp	.-34     	; 0x274 <led_on+0x38>
 296:	08 95       	ret

00000298 <led_off>:
	}

}

void led_off(u08 addr){
	switch(addr){
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	b1 f0       	breq	.+44     	; 0x2c8 <led_off+0x30>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	28 f4       	brcc	.+10     	; 0x2aa <led_off+0x12>
 2a0:	88 23       	and	r24, r24
 2a2:	41 f0       	breq	.+16     	; 0x2b4 <led_off+0x1c>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	29 f5       	brne	.+74     	; 0x2f2 <led_off+0x5a>
 2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <led_off+0x28>
 2aa:	83 30       	cpi	r24, 0x03	; 3
 2ac:	89 f0       	breq	.+34     	; 0x2d0 <led_off+0x38>
 2ae:	8f 3f       	cpi	r24, 0xFF	; 255
 2b0:	01 f5       	brne	.+64     	; 0x2f2 <led_off+0x5a>
 2b2:	15 c0       	rjmp	.+42     	; 0x2de <led_off+0x46>
		case 0:{
			PORTE.OUT &= ~(1<<1);
 2b4:	80 91 84 06 	lds	r24, 0x0684
 2b8:	8d 7f       	andi	r24, 0xFD	; 253
 2ba:	e0 e8       	ldi	r30, 0x80	; 128
 2bc:	f6 e0       	ldi	r31, 0x06	; 6
 2be:	0d c0       	rjmp	.+26     	; 0x2da <led_off+0x42>
			break;
			}
		case 1:{
			PORTF.OUT &= ~(1<<5);
 2c0:	80 91 a4 06 	lds	r24, 0x06A4
 2c4:	8f 7d       	andi	r24, 0xDF	; 223
 2c6:	07 c0       	rjmp	.+14     	; 0x2d6 <led_off+0x3e>
			break;
			}
		case 2:{
			PORTF.OUT &= ~(1<<6);
 2c8:	80 91 a4 06 	lds	r24, 0x06A4
 2cc:	8f 7b       	andi	r24, 0xBF	; 191
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <led_off+0x3e>
			break;
			}
		case 3:{
			PORTF.OUT &= ~(1<<7);
 2d0:	80 91 a4 06 	lds	r24, 0x06A4
 2d4:	8f 77       	andi	r24, 0x7F	; 127
 2d6:	e0 ea       	ldi	r30, 0xA0	; 160
 2d8:	f6 e0       	ldi	r31, 0x06	; 6
 2da:	84 83       	std	Z+4, r24	; 0x04
 2dc:	08 95       	ret
			break;
			}
		case 255:{
			led_off(0);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 4c 01 	call	0x298	; 0x298 <led_off>
			led_off(1);
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 4c 01 	call	0x298	; 0x298 <led_off>
			led_off(2);
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	0e 94 4c 01 	call	0x298	; 0x298 <led_off>
 2f0:	ef cf       	rjmp	.-34     	; 0x2d0 <led_off+0x38>
 2f2:	08 95       	ret

000002f4 <main>:
#include "xmega_test.h"

int main(void){
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
	}
	return 0;
}

void init(void){
	PORTA.DIR=0x00;
 2f8:	10 92 00 06 	sts	0x0600, r1
	PORTB.DIR=0x00;
 2fc:	10 92 20 06 	sts	0x0620, r1
	PORTC.DIR=0x00;
 300:	10 92 40 06 	sts	0x0640, r1
	PORTD.DIR=0x00;
 304:	10 92 60 06 	sts	0x0660, r1
	PORTE.DIR=0b00000010;
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	80 93 80 06 	sts	0x0680, r24
	PORTF.DIR=0b11100000;
 30e:	80 ee       	ldi	r24, 0xE0	; 224
 310:	80 93 a0 06 	sts	0x06A0, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 314:	c9 e1       	ldi	r28, 0x19	; 25
 316:	d0 e0       	ldi	r29, 0x00	; 0
#include "xmega_test.h"

int main(void){
	init();
	while(1){
		led_on(1);
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 1e 01 	call	0x23c	; 0x23c <led_on>
 31e:	88 e8       	ldi	r24, 0x88	; 136
 320:	93 e1       	ldi	r25, 0x13	; 19
 322:	fe 01       	movw	r30, r28
 324:	31 97       	sbiw	r30, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <main+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 328:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 32a:	d9 f7       	brne	.-10     	; 0x322 <main+0x2e>
		_delay_ms(500);
		led_on(2);
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	0e 94 1e 01 	call	0x23c	; 0x23c <led_on>
 332:	88 e8       	ldi	r24, 0x88	; 136
 334:	93 e1       	ldi	r25, 0x13	; 19
 336:	fe 01       	movw	r30, r28
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 33c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 33e:	d9 f7       	brne	.-10     	; 0x336 <main+0x42>
		_delay_ms(500);
		led_on(3);
 340:	83 e0       	ldi	r24, 0x03	; 3
 342:	0e 94 1e 01 	call	0x23c	; 0x23c <led_on>
 346:	88 e8       	ldi	r24, 0x88	; 136
 348:	93 e1       	ldi	r25, 0x13	; 19
 34a:	fe 01       	movw	r30, r28
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <main+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 350:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 352:	d9 f7       	brne	.-10     	; 0x34a <main+0x56>
		_delay_ms(500);
		led_on(0);
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 1e 01 	call	0x23c	; 0x23c <led_on>
 35a:	88 e8       	ldi	r24, 0x88	; 136
 35c:	93 e1       	ldi	r25, 0x13	; 19
 35e:	fe 01       	movw	r30, r28
 360:	31 97       	sbiw	r30, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <main+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 364:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 366:	d9 f7       	brne	.-10     	; 0x35e <main+0x6a>
		_delay_ms(500);
		led_off(0);
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 4c 01 	call	0x298	; 0x298 <led_off>
		led_off(1);
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 4c 01 	call	0x298	; 0x298 <led_off>
		led_off(2);
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	0e 94 4c 01 	call	0x298	; 0x298 <led_off>
		led_off(3);
 37a:	83 e0       	ldi	r24, 0x03	; 3
 37c:	0e 94 4c 01 	call	0x298	; 0x298 <led_off>
 380:	88 e8       	ldi	r24, 0x88	; 136
 382:	93 e1       	ldi	r25, 0x13	; 19
 384:	fe 01       	movw	r30, r28
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <main+0x92>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 38a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 38c:	d9 f7       	brne	.-10     	; 0x384 <main+0x90>
 38e:	c4 cf       	rjmp	.-120    	; 0x318 <main+0x24>

00000390 <_exit>:
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
